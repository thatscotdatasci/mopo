#!/bin/bash
#SBATCH -J mopo
#SBATCH -A KRUEGER-SL2-GPU
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --mem=8000
#SBATCH --gres=gpu:1
##SBATCH --exclusive
#SBATCH --time=12:00:00
#SBATCH --mail-type=FAIL
#! Uncomment this to prevent the job from being requeued (e.g. if
#! interrupted by node failure or system downtime):
##SBATCH --no-requeue
#SBATCH -p pascal

#! Number of nodes and tasks per node allocated by SLURM (do not change):
numnodes=$SLURM_JOB_NUM_NODES
numtasks=$SLURM_NTASKS
mpi_tasks_per_node=$(echo "$SLURM_TASKS_PER_NODE" | sed -e  's/^\([0-9][0-9]*\).*$/\1/')
#! ############################################################
#! Modify the settings below to specify the application's environment, location 
#! and launch method:

#! Optionally modify the environment seen by the application
#! (note that SLURM reproduces the environment at submission irrespective of ~/.bashrc):
. /etc/profile.d/modules.sh                # Leave this line (enables the module command)
module purge                               # Removes all modules still loaded
module load rhel8/default-amp              # REQUIRED - loads the basic environment

#! Insert additional module load commands after this line if needed:
module load cuda/10.0 cudnn/7.4_cuda-10.0
module load miniconda/3
source ~/rds/rds-dsk-lab-eWkDxBhxBrQ/dimorl/code/mopo/README.mopo.activate

#! Full path to application executable: 
application="mopo"

#! Run options for the application:
options="run_local examples.development \
        --config=examples.config.d4rl.{{ config }} \
        --gpus=1 --trial-gpus=1 \
        --checkpoint-frequency=100 \
        --seed {{ seed }} \
        --exp-name {{ exp_name }} \
        --rex-beta {{ rex_beta }} \
        --bnn-retrain-epochs {{ bnn_retrain_epochs }} \
        --penalty-coeff {{ mopo_penalty_coeff }} \
        --rollout-length {{ rollout_length }} \
        --rollout-batch-size {{ rollout_batch_size }} \
        --rex {{ rex }} \
        --train_bnn_only {{ train_bnn_only }} \
        --rex_type {{ rex_type }} \
        --policy_type {{ policy_type }} \
        --dataset {{ dataset }}"
        # --model-load-dir {{ model_load_dir }}"
        #         --dataset {{ dataset }} \


# mopo run_local examples.development --config=examples.config.d4rl.halfcheetah_custom_rex --gpus=1 --trial-gpus=1 --checkpoint-frequency=100 --seed 4 --rex-beta=10 --exp-name rexb10 --dataset MIXED-RT-5
#! Work directory (i.e. where the job will run):
#workdir="$SLURM_SUBMIT_DIR"
workdir="/home/hpcanok1/rds/project/rds-eWkDxBhxBrQ/dimorl/code/mopo"  # The value of SLURM_SUBMIT_DIR sets workdir to the directory
                             # in which sbatch is run.

#! Are you using OpenMP (NB this is unrelated to OpenMPI)? If so increase this
#! safe value to no more than 128:
export OMP_NUM_THREADS=1

#! Number of MPI tasks to be started by the application per node and in total (do not change):
np=$[${numnodes}*${mpi_tasks_per_node}]

#! Choose this for a pure shared-memory OpenMP parallel program on a single node:
#! (OMP_NUM_THREADS threads will be created):
CMD="$application $options"

#! Choose this for a MPI code using OpenMPI:
#CMD="mpirun -npernode $mpi_tasks_per_node -np $np $application $options"

###############################################################
### You should not have to change anything below this line ####
###############################################################

JOBID=$SLURM_JOB_ID
LOG=slurm_logs/train-log.$JOBID
ERR=slurm_logs/train-err.$JOBID

echo "Initialising..." > $LOG

cd $workdir
echo -e "Changed directory to `pwd`.\n" >> $LOG

echo -e "JobID: $JOBID\n======" >> $LOG
echo "Time: `date`" >> $LOG
echo "Running on master node: `hostname`" >> $LOG
echo "Current directory: `pwd`" >> $LOG

if [ "$SLURM_JOB_NODELIST" ]; then
        #! Create a machine file:
        export NODEFILE=`generate_pbs_nodefile`
        cat $NODEFILE | uniq > machine.file.$JOBID
        echo -e "\nNodes allocated:\n================" >> $LOG
        echo `cat machine.file.$JOBID | sed -e 's/\..*$//g'` >> $LOG
fi

echo -e "\nnumtasks=$numtasks, numnodes=$numnodes, mpi_tasks_per_node=$mpi_tasks_per_node (OMP_NUM_THREADS=$OMP_NUM_THREADS)" >> $LOG

echo -e "\nExecuting command:\n==================\n$CMD\n" >> $LOG

eval $CMD >> $LOG

echo "Time: `date`" >> $LOG
